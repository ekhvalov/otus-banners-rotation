// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ekhvalov/otus-banners-rotation/internal/app (interfaces: Storage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AttachBanner mocks base method.
func (m *MockStorage) AttachBanner(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachBanner", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachBanner indicates an expected call of AttachBanner.
func (mr *MockStorageMockRecorder) AttachBanner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachBanner", reflect.TypeOf((*MockStorage)(nil).AttachBanner), arg0, arg1, arg2)
}

// ClickBanner mocks base method.
func (m *MockStorage) ClickBanner(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClickBanner", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClickBanner indicates an expected call of ClickBanner.
func (mr *MockStorageMockRecorder) ClickBanner(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickBanner", reflect.TypeOf((*MockStorage)(nil).ClickBanner), arg0, arg1, arg2, arg3)
}

// CreateBanner mocks base method.
func (m *MockStorage) CreateBanner(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockStorageMockRecorder) CreateBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockStorage)(nil).CreateBanner), arg0, arg1)
}

// CreateSlot mocks base method.
func (m *MockStorage) CreateSlot(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlot", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlot indicates an expected call of CreateSlot.
func (mr *MockStorageMockRecorder) CreateSlot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlot", reflect.TypeOf((*MockStorage)(nil).CreateSlot), arg0, arg1)
}

// CreateSocialGroup mocks base method.
func (m *MockStorage) CreateSocialGroup(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSocialGroup", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSocialGroup indicates an expected call of CreateSocialGroup.
func (mr *MockStorageMockRecorder) CreateSocialGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSocialGroup", reflect.TypeOf((*MockStorage)(nil).CreateSocialGroup), arg0, arg1)
}

// DeleteBanner mocks base method.
func (m *MockStorage) DeleteBanner(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockStorageMockRecorder) DeleteBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockStorage)(nil).DeleteBanner), arg0, arg1)
}

// DeleteSlot mocks base method.
func (m *MockStorage) DeleteSlot(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSlot indicates an expected call of DeleteSlot.
func (mr *MockStorageMockRecorder) DeleteSlot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlot", reflect.TypeOf((*MockStorage)(nil).DeleteSlot), arg0, arg1)
}

// DeleteSocialGroup mocks base method.
func (m *MockStorage) DeleteSocialGroup(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSocialGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSocialGroup indicates an expected call of DeleteSocialGroup.
func (mr *MockStorageMockRecorder) DeleteSocialGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSocialGroup", reflect.TypeOf((*MockStorage)(nil).DeleteSocialGroup), arg0, arg1)
}

// DetachBanner mocks base method.
func (m *MockStorage) DetachBanner(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachBanner", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachBanner indicates an expected call of DetachBanner.
func (mr *MockStorageMockRecorder) DetachBanner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachBanner", reflect.TypeOf((*MockStorage)(nil).DetachBanner), arg0, arg1, arg2)
}

// SelectBanner mocks base method.
func (m *MockStorage) SelectBanner(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBanner", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectBanner indicates an expected call of SelectBanner.
func (mr *MockStorageMockRecorder) SelectBanner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBanner", reflect.TypeOf((*MockStorage)(nil).SelectBanner), arg0, arg1, arg2)
}
